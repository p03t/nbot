#!/bin/bash

_BASENAME="$(basename $0)"
_DEPS="iproute2 iputils-ping isc-dhcp-client wpasupplicant lsof iw"
_INSTALL_DEPS_CMD="$_BASENAME install"
_CREATE_WPASUPPLICANT_CMD="$_BASENAME config SSID PASSPHRASE FILE_PATH"
# CUSTOMIZABLE VARIABLES
_USEVPN=0
_OVPN=""
_INTERFACE=""
_WPASUPPLICANT=""
#

if (( _USEVPN )); then
	_DEPS+=" openvpn"
fi

say() { # (string buffer)
	if [ -n "$1" ]; then
		echo "[INFO] $_BASENAME | $1"
	fi
}
sayerr() { # (string buffer)
	if [ -n "$1" ]; then
		echo "[FAILURE] $_BASENAME | $1"	
	fi
}
usesvpn() {
	if (( _USEVPN )); then
		return 0;
	else
		return 1;
	fi
}

depcheck() { 
	ISGOOD=1
	for DEP in $_DEPS; do
		if ! dpkg-query -s $DEP &> /dev/null; then
			say "$DEP not installed" 
			ISGOOD=0 
		fi
	done	
	if ((ISGOOD)); then
		say "All dependencies are installed."
	else
		sayerr "There are missing dependencies. \
				Use $_INSTALL_DEPS_CMD to install them."
	fi
}

install() {
	ISGOOD=0
	if [ $UID -ne 0 ]; then
		if dpkg-query -s sudo &> /dev/null; then
			sudo apt-get install $_DEPS && ISGOOD=1
		else
			sayerr "sudo not installed."
		fi
	else
		apt-get install $_DEPS && ISGOOD=1
	fi
	if ((ISGOOD)); then
		say "All dependencies have been installed"
	else
		sayerr "Dependencies installation failed"
	fi
}

connectivity() {
	if ping -c 1 -w 15 $(ip route|grep default|cut -d " " -f 3) &> /dev/null; then
		return 0
	else
		return 1
	fi
}

procdown() { # (string process)
	if [ ! -n "$(pidof $1)" ]; then
		return 1
	fi
	TRIES=0
	while [ -n "$(pidof $1)" ]; do
		pkill -TERM $1
		if ((++TRIES>1)); then
			sleep 0.1
		fi
		if ((TRIES > 10)); then
			pkill -KILL $1
		fi
	done
}

netup() {
	ip link set $_INTERFACE up
	wpa_supplicant -Dnl80211 -B -i $_INTERFACE -c $_WPASUPPLICANT
	dhclient -v $_INTERFACE
	usesvpn && openvpn $_OVPN &
}

netdown() {
	usesvpn && procdown openvpn
	dhclient -v -r $_INTERFACE
	procdown dhclient
	procdown wpa_supplicant
	ip link set $_INTERFACE down
}

verifyroot() {
	if [ $UID -ne 0 ]; then
		sayerr "root privileges required to perform this action."
		exit 1
	fi
}
isroot() {
	if [ $UID == 0 ]; then
		return 0
	else
		return 1
	fi
}
checksetup() {
	if usesvpn && [ ! -f "$_OVPN" ]; then
		sayerr 'Invalid OpenVPN config file ($_OVPN)'
		exit 1
	fi
	if [ ! -f "$_WPASUPPLICANT" ]; then
		sayerr 'Invalid wpa_supplicant config file ($_WPASUPPLICANT)'
		sayerr "Use \"$_CREATE_WPASUPPLICANT_CMD\" to create it"
		exit 1
	fi
	if [ -z "$_INTERFACE" ]; then
		sayerr 'Network Interface not set ($_INTERFACE)'
		exit 1
	elif ! ip link show $_INTERFACE &> /dev/null; then
		sayerr "Network Interface $_INTERFACE is invalid "'($_INTERFACE)'
		exit 1
	fi
}
networkinfo() {
	echo "CONNECTIVITY"
	if connectivity; then
		echo "Connection to Gateway is ALIVE"	
	else
		echo "Connection to Gateway is DEAD"
	fi
	echo
	echo "ROUTE"
	ip route
	echo
	if isroot; then
		echo "INET CONNECTIONS" 
	else
		echo "INET CONNECTIONS ($USER)"
	fi
	echo "TCP: $(lsof -ni|grep TCP|wc -l)"
	echo "UDP: $(lsof -ni|grep UDP|wc -l)"
	echo
	echo "NETWORK PROCESSES"
	pgrep -a dhclient
	pgrep -a openvpn
	echo
	if isroot; then
		echo "IPTABLES"
		iptables -nvL
		echo
		echo "Wireless Status"
		iwconfig $_INTERFACE
	else
		say "Limited output for not being root."
	fi
}
create_config() { # (string SSID, string PSK, string FILE_PATH)
	if (($# < 3)); then
		sayerr "Invalid parameters provided (SSID,PSK,FILE_PATH)"	
		exit 1
	fi	
	echo -e "network={\n\tssid=\"$1\"\n\tpsk=\"$2\"\n}" > $3
	say "wpa_supplicant configuration written to $3"
}


case "$1" in
	up)
		verifyroot
		checksetup
		netup
		exit
		;;
	down)
		verifyroot
		netdown
		exit
		;;
	restart)
		verifyroot
		checksetup
		netdown
		netup
		exit
		;;
	install)
		verifyroot
		install
		exit
		;;
	network)
		networkinfo
		exit
		;;
	config)
		create_config $2 $3 $4
		exit
		;;
	*)
		sayerr "Usage: $_BASENAME [up|down|restart|network|install|config]"
		exit
		;;
esac
